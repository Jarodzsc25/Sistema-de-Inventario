en postgresql
-- ==================================================
-- TABLA PERSONA
-- ==================================================
CREATE TABLE persona (
    id_persona SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    correo VARCHAR(150) UNIQUE NOT NULL,
    telefono VARCHAR(20),
    direccion TEXT
);

-- ==================================================
-- TABLA USUARIO
-- ==================================================
CREATE TABLE usuario (
    id_usuario SERIAL PRIMARY KEY,
    id_persona INT NOT NULL REFERENCES persona(id_persona),
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    tipo_usuario VARCHAR(20) NOT NULL CHECK (tipo_usuario IN ('Administrador','Cajero'))
);

-- ==================================================
-- TABLA CLIENTE
-- ==================================================
CREATE TABLE cliente (
    id_cliente SERIAL PRIMARY KEY,
    id_persona INT NOT NULL REFERENCES persona(id_persona)
);

-- ==================================================
-- TABLA DISTRIBUIDOR
-- ==================================================
CREATE TABLE distribuidor (
    id_distribuidor SERIAL PRIMARY KEY,
    nombre_empresa VARCHAR(150) NOT NULL,
    contacto VARCHAR(100),
    telefono VARCHAR(20),
    direccion TEXT
);

-- ==================================================
-- TABLA PRODUCTO
-- ==================================================
CREATE TABLE producto (
    id_producto SERIAL PRIMARY KEY,
    nombre VARCHAR(150) NOT NULL,
    descripcion TEXT,
    precio NUMERIC(10,2) NOT NULL,
    stock INT NOT NULL DEFAULT 0,
    id_distribuidor INT NOT NULL REFERENCES distribuidor(id_distribuidor)
);

-- ==================================================
-- TABLA PEDIDO
-- ==================================================
CREATE TABLE pedido (
    id_pedido SERIAL PRIMARY KEY,
    id_cliente INT NOT NULL REFERENCES cliente(id_cliente),
    id_usuario INT NOT NULL REFERENCES usuario(id_usuario),
    fecha_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR(50) DEFAULT 'Pendiente'
);

-- ==================================================
-- TABLA DETALLE_PEDIDO
-- ==================================================
CREATE TABLE detalle_pedido (
    id_detalle SERIAL PRIMARY KEY,
    id_pedido INT NOT NULL REFERENCES pedido(id_pedido),
    id_producto INT NOT NULL REFERENCES producto(id_producto),
    cantidad INT NOT NULL,
    subtotal NUMERIC(10,2)
);

-- ==================================================
-- TABLA RECIBO
-- ==================================================
CREATE TABLE recibo (
    id_recibo SERIAL PRIMARY KEY,
    id_pedido INT NOT NULL REFERENCES pedido(id_pedido),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    monto_total NUMERIC(12,2) NOT NULL,
    metodo_pago VARCHAR(50) NOT NULL
);

-- ==================================================
-- TABLA MOVIMIENTO
-- ==================================================
CREATE TABLE movimiento (
    id_movimiento SERIAL PRIMARY KEY,
    id_producto INT NOT NULL REFERENCES producto(id_producto),
    tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('Ingreso','Salida')),
    cantidad INT NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_usuario INT REFERENCES usuario(id_usuario),
    observacion TEXT
);

-- ==================================================
-- TABLA KARDEX
-- ==================================================
CREATE TABLE kardex (
    id_kardex SERIAL PRIMARY KEY,
    id_producto INT NOT NULL REFERENCES producto(id_producto),
    stock_actual INT,
    ultimo_movimiento TIMESTAMP
);

-- ==================================================
-- TRIGGER PARA CALCULAR SUBTOTAL AUTOMÁTICO EN DETALLE_PEDIDO
-- ==================================================
CREATE OR REPLACE FUNCTION calcular_subtotal()
RETURNS TRIGGER AS $$
BEGIN
    NEW.subtotal := NEW.cantidad * (SELECT precio FROM producto WHERE id_producto = NEW.id_producto);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_calcular_subtotal
BEFORE INSERT OR UPDATE ON detalle_pedido
FOR EACH ROW
EXECUTE FUNCTION calcular_subtotal();



en dbdiagram.io 

////////////////////////////////////////////////////////////
// BASE DE DATOS: sistema_ventas_roles
////////////////////////////////////////////////////////////

Table persona {
  id_persona int [pk, increment]
  nombre varchar(100)
  apellido varchar(100)
  correo varchar(150) [unique]
  telefono varchar(20)
  direccion text
}

Table usuario {
  id_usuario int [pk, increment]
  id_persona int [not null, ref: > persona.id_persona]
  username varchar(50) [unique]
  password varchar(255)
  tipo_usuario enum('Administrador','Cajero')
}

Table cliente {
  id_cliente int [pk, increment]
  id_persona int [not null, ref: > persona.id_persona]
}

Table distribuidor {
  id_distribuidor int [pk, increment]
  nombre_empresa varchar(150)
  contacto varchar(100)
  telefono varchar(20)
  direccion text
}

Table producto {
  id_producto int [pk, increment]
  nombre varchar(150)
  descripcion text
  precio decimal(10,2)
  stock int
  id_distribuidor int [not null, ref: > distribuidor.id_distribuidor]
}

Table pedido {
  id_pedido int [pk, increment]
  id_cliente int [not null, ref: > cliente.id_cliente]
  id_usuario int [not null, ref: > usuario.id_usuario] // quien atendió
  fecha_pedido datetime
  estado varchar(50)
}

Table detalle_pedido {
  id_detalle int [pk, increment]
  id_pedido int [not null, ref: > pedido.id_pedido]
  id_producto int [not null, ref: > producto.id_producto]
  cantidad int
  subtotal decimal(10,2)
}

Table recibo {
  id_recibo int [pk, increment]
  id_pedido int [not null, ref: > pedido.id_pedido]
  fecha datetime
  monto_total decimal(12,2)
  metodo_pago varchar(50)
}

Table movimiento {
  id_movimiento int [pk, increment]
  id_producto int [not null, ref: > producto.id_producto]
  tipo enum('Ingreso','Salida')
  cantidad int
  fecha datetime
  id_usuario int [ref: > usuario.id_usuario]
  observacion text
}

Table kardex {
  id_kardex int [pk, increment]
  id_producto int [not null, ref: > producto.id_producto]
  stock_actual int
  ultimo_movimiento datetime
}


